{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":2387160,"sourceType":"datasetVersion","datasetId":453611}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install tensorflow pandas matplotlib","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define paths\nbase_dir='/kaggle/input/70-dog-breedsimage-data-set'\ntrain_dir = base_dir+'/train'\nvalid_dir = base_dir+'/valid'\ntest_dir = base_dir+'/test'\ncsv_path = base_dir+'/dogs.csv'","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\ncategory_names = os.listdir(train_dir) # output: ['humans', 'horses']\nnb_categories = len(category_names) # output: 2\ntrain_images = []","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for category in category_names:\n    folder = train_dir + \"/\" + category\n    train_images.append(len(os.listdir(folder)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n\n\n# Define image data generator with augmentation for training data\ntrain_datagen = ImageDataGenerator(\n    rescale=1./255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True\n)\n\n# Define image data generator for validation and test data\nval_test_datagen = ImageDataGenerator(rescale=1./255)\n\n# Load training data\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=(300, 300),\n    batch_size=128,\n    class_mode='binary'\n)\n\n# Load validation data\nvalid_generator = val_test_datagen.flow_from_directory(\n    valid_dir,\n    target_size=(300, 300),\n    batch_size=128,\n    class_mode='binary'\n)\n\n# Load test data\ntest_generator = val_test_datagen.flow_from_directory(\n    test_dir,\n    target_size=(300, 300),\n    batch_size=128,\n    class_mode='sparse'\n)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.mixed_precision import experimental as mixed_precision\n\npolicy = mixed_precision.Policy('mixed_float16')\nmixed_precision.set_policy(policy)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.applications import ResNet50,EfficientNetB0,InceptionV3\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras import layers\n\n# # Load a pre-trained ResNet model\n# base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# # Freeze the base model\n# base_model.trainable = False\nbase_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(300, 300, 3))\n# base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\nbase_model.trainable = True\nfor layer in base_model.layers[:-10]:  # Freeze all layers except the last 10\n    layer.trainable = False\n# x = base_model.output\n# x = Flatten()(x)\n# Add custom layers on top of the base model\n\nmodel = Sequential([\n    base_model,\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dropout(0.5),\n    Dense(70, activation='softmax')# 70 classes for dog breeds\n])\n\n# model = Sequential([\n#     # The first convolution\n#     layers.Conv2D(16, 3, activation='relu', input_shape=(300, 300, 3)),\n#     layers.MaxPooling2D(2, 2),\n#     # The second convolution\n#     layers.Conv2D(32, 3, activation='relu'),\n#     layers.MaxPooling2D(2,2),\n#     # The third convolution\n#     layers.Conv2D(64, 3, activation='relu'),\n#     layers.MaxPooling2D(2,2),\n#     # The fourth convolution\n#     layers.Conv2D(64, 3, activation='relu'),\n#     layers.MaxPooling2D(2,2),\n#     # The fifth convolution\n#     layers.Conv2D(64, 3, activation='relu'),\n#     layers.MaxPooling2D(2,2),\n#     # Flatten the results to feed into a DNN\n#     layers.Flatten(),\n#     # 512 neuron hidden layer\n#     layers.Dense(512, activation='relu'),\n#     # Only 1 output neuron\n#     layers.Dense(1, activation='sigmoid')\n# ])\n\n\n\n#Compile the model\nmodel.compile(optimizer='adam', \n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False)\n              , metrics=['accuracy'])\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from tensorflow.keras.optimizers import RMSprop\n\n# model.compile(loss='categorical_crossentropy',\n#               optimizer=RMSprop(learning_rate=0.0001),\n#               metrics=['accuracy'])\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.callbacks import ReduceLROnPlateau\n\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=0.00001)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the model\nhistory = model.fit(\n    train_generator,\n#     steps_per_epoch=8,\n#     batch_size=128,\n    epochs=20,\n    validation_data=valid_generator,\n#     validation_steps=6,\n    verbose=1,\n    callbacks=[reduce_lr]\n)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\ntest_loss, test_accuracy = model.evaluate(test_generator)\nprint(f'Test Accuracy: {test_accuracy:.2f}')\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.save('dogedex_breed_classifier.h5')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom tensorflow.keras.preprocessing import image\n\n# Function to load and preprocess the image\ndef prepare_image(img_path):\n    img = image.load_img(img_path, target_size=(224, 224))\n    img_array = image.img_to_array(img)\n    img_array = np.expand_dims(img_array, axis=0)\n    img_array /= 255.0  # Normalize the image\n    return img_array\n\n# Function to predict the dog breed\ndef predict_breed(img_path):\n    img_array = prepare_image(img_path)\n    predictions = model.predict(img_array)\n    predicted_class = np.argmax(predictions, axis=1)\n    return predicted_class\n\n# Load class names from the CSV file\n# class_names = list(set(pd.read_csv(csv_path)['labels'].tolist()))\n# img_filepath = list(set(pd.read_csv(csv_path)['filepaths'].tolist()))\nclass_names = list(train_generator.class_indices.keys())\n\n# Function to get the breed name\ndef get_breed_name(class_index):\n    return class_names[class_index]\n\n# Function to predict and display the breed name\ndef show_prediction(img_path):\n    class_index = predict_breed(img_path)\n    breed_name = get_breed_name(class_index[0])\n    print(f'The predicted breed is: {breed_name}')\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class_names[11]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class_names = list(train_generator.class_indices.keys())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class_names[11]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Model Prediction Testing","metadata":{}},{"cell_type":"code","source":"class_names = list(train_generator.class_indices.keys())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class_names=['Afghan', 'African Wild Dog', 'Airedale', 'American Hairless', 'American Spaniel', 'Basenji', 'Basset', 'Beagle', 'Bearded Collie', 'Bermaise', 'Bichon Frise', 'Blenheim', 'Bloodhound', 'Bluetick', 'Border Collie', 'Borzoi', 'Boston Terrier', 'Boxer', 'Bull Mastiff', 'Bull Terrier', 'Bulldog', 'Cairn', 'Chihuahua', 'Chinese Crested', 'Chow', 'Clumber', 'Cockapoo', 'Cocker', 'Collie', 'Corgi', 'Coyote', 'Dalmation', 'Dhole', 'Dingo', 'Doberman', 'Elk Hound', 'French Bulldog', 'German Sheperd', 'Golden Retriever', 'Great Dane', 'Great Perenees', 'Greyhound', 'Groenendael', 'Irish Spaniel', 'Irish Wolfhound', 'Japanese Spaniel', 'Komondor', 'Labradoodle', 'Labrador', 'Lhasa', 'Malinois', 'Maltese', 'Mex Hairless', 'Newfoundland', 'Pekinese', 'Pit Bull', 'Pomeranian', 'Poodle', 'Pug', 'Rhodesian', 'Rottweiler', 'Saint Bernard', 'Schnauzer', 'Scotch Terrier', 'Shar_Pei', 'Shiba Inu', 'Shih-Tzu', 'Siberian Husky', 'Vizsla', 'Yorkie']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\nmodel = load_model('/kaggle/working/dogedex_breed_classifier.h5')\ndt = ''   \n# class_names = list(train_generator.class_indices.keys())\n\nn=0\nfor image_batch, label_batch in test_generator:\n    if n == 4:\n        break\n    first_image = image_batch[0]\n#     print(first_image)\n    first_label = int(label_batch[0])  # Access the first element of label_batch\n    batch_prediction = model.predict(image_batch)\n    confidence = round(100 * (np.max(batch_prediction[0])), 2)\n    predicted_label = class_names[np.argmax(batch_prediction[0])]\n#     print(\"predicted label:\",)\n    # Display the first image\n    plt.imshow(first_image)\n    plt.title(f'Label: {class_names[first_label]} \\n Predicted Label:{predicted_label} \\n confidence:{confidence}')\n    plt.show()\n    n+=1\n    \n    \n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"with open('class_names.py', 'w') as f:\n    class_names_str = \"class_names=\"+str(class_names)\n    f.write(class_names_str)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"with open('class_names.py', 'r') as f:\n    dt = f.read()\n    print(dt)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tf.saved_model.save(model,'dogedex')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Post-Training Quantization\n\n* Full Integer Quantization:\n* Description: Converts both weights and activations to int8.","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\nmodel = load_model('/kaggle/working/dogedex_breed_classifier.h5')\n\ndef representative_dataset_gen():\n    for _ in range(num_calibration_steps):\n        yield [input_data]\n\n# converter = tf.lite.TFLiteConverter.from_saved_model('/kaggle/working/dogedex')\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]\nconverter.representative_dataset = representative_dataset_gen\ntflite_model = converter.convert()\n\n# with open('/kaggle/working/DogeDex_full_integer_quantized.tflite', 'wb') as f:\n#     f.write(tflite_model)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\nmodel = load_model('/kaggle/working/dogedex_breed_classifier.h5')\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\n# converter.optimizations = [tf.lite.Optimize.DEFAULT]\ntflite_model = converter.convert()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tflite_model","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#  Convert TensorFlow Model to ONNX","metadata":{}},{"cell_type":"code","source":"!pip install tf2onnx onnxruntime\n!pip install onnxruntime","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nimport tf2onnx\nimport onnx\n\n# Load your TensorFlow model\nmodel = tf.keras.models.load_model('/kaggle/working/dogedex_breed_classifier.h5')\n\n# Check if the model is Sequential and add output names if missing\nif isinstance(model, tf.keras.Sequential):\n    model.output_names = [layer.name for layer in model.layers]\n\n# Convert the model to ONNX\nonnx_model, _ = tf2onnx.convert.from_keras(model, opset=13)\n\n# Save the ONNX model\nonnx.save(onnx_model, 'dogedex.onnx')\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Upload keras Model in HuggingFaceHUb","metadata":{}},{"cell_type":"code","source":"pip install huggingface_hub","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"HuggingFace_Api_Key\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!huggingface-cli login --token $secret_value","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}